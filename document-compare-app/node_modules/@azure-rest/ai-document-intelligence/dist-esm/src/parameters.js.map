{"version":3,"file":"parameters.js","sourceRoot":"","sources":["../../src/parameters.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestParameters } from \"@azure-rest/core-client\";\nimport {\n  AnalyzeDocumentRequest,\n  BuildDocumentModelRequest,\n  ComposeDocumentModelRequest,\n  AuthorizeCopyRequest,\n  CopyAuthorization,\n  BuildDocumentClassifierRequest,\n  ClassifyDocumentRequest,\n} from \"./models\";\n\nexport type ListOperationsParameters = RequestParameters;\nexport type GetDocumentModelBuildOperationParameters = RequestParameters;\nexport type GetDocumentModelComposeOperationParameters = RequestParameters;\nexport type GetDocumentModelCopyToOperationParameters = RequestParameters;\nexport type GetDocumentClassifierBuildOperationParameters = RequestParameters;\nexport type GetOperationParameters = RequestParameters;\nexport type GetResourceInfoParameters = RequestParameters;\nexport type GetAnalyzeResultParameters = RequestParameters;\n\nexport interface AnalyzeDocumentFromStreamBodyParam {\n  /**\n   * Input content.\n   *\n   * Value may contain any sequence of octets\n   */\n  body: string | Uint8Array | ReadableStream<Uint8Array> | NodeJS.ReadableStream;\n}\n\nexport interface AnalyzeDocumentFromStreamQueryParamProperties {\n  /** List of 1-based page numbers to analyze.  Ex. \"1-3,5,7-9\" */\n  pages?: string;\n  /**\n   * Locale hint for text recognition and document analysis.  Value may contain only\n   * the language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\").\n   */\n  locale?: string;\n  /**\n   * Method used to compute string offset and length.\n   *\n   * Possible values: textElements, unicodeCodePoint, utf16CodeUnit\n   */\n  stringIndexType?: string;\n  /** List of optional analysis features. */\n  features?: string[];\n  /** List of additional fields to extract.  Ex. \"NumberOfGuests,StoreNumber\" */\n  queryFields?: string[];\n  /**\n   * Format of the analyze result top-level content.\n   *\n   * Possible values: text, markdown\n   */\n  outputContentFormat?: string;\n}\n\nexport interface AnalyzeDocumentFromStreamQueryParam {\n  queryParameters?: AnalyzeDocumentFromStreamQueryParamProperties;\n}\n\nexport interface AnalyzeDocumentFromStreamMediaTypesParam {\n  /** Input content type. */\n  contentType:\n    | \"application/octet-stream\"\n    | \"application/pdf\"\n    | \"image/jpeg\"\n    | \"image/png\"\n    | \"image/tiff\"\n    | \"image/bmp\"\n    | \"image/heif\"\n    | \"text/html\"\n    | \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    | \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\";\n}\n\nexport type AnalyzeDocumentFromStreamParameters = AnalyzeDocumentFromStreamQueryParam &\n  AnalyzeDocumentFromStreamMediaTypesParam &\n  AnalyzeDocumentFromStreamBodyParam &\n  RequestParameters;\n\nexport interface AnalyzeDocumentBodyParam {\n  /** Analyze request parameters. */\n  body?: AnalyzeDocumentRequest;\n}\n\nexport interface AnalyzeDocumentQueryParamProperties {\n  /** List of 1-based page numbers to analyze.  Ex. \"1-3,5,7-9\" */\n  pages?: string;\n  /**\n   * Locale hint for text recognition and document analysis.  Value may contain only\n   * the language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\").\n   */\n  locale?: string;\n  /**\n   * Method used to compute string offset and length.\n   *\n   * Possible values: textElements, unicodeCodePoint, utf16CodeUnit\n   */\n  stringIndexType?: string;\n  /** List of optional analysis features. */\n  features?: string[];\n  /** List of additional fields to extract.  Ex. \"NumberOfGuests,StoreNumber\" */\n  queryFields?: string[];\n  /**\n   * Format of the analyze result top-level content.\n   *\n   * Possible values: text, markdown\n   */\n  outputContentFormat?: string;\n}\n\nexport interface AnalyzeDocumentQueryParam {\n  queryParameters?: AnalyzeDocumentQueryParamProperties;\n}\n\nexport interface AnalyzeDocumentMediaTypesParam {\n  /** Input content type */\n  contentType: \"application/json\";\n}\n\nexport type AnalyzeDocumentParameters = AnalyzeDocumentQueryParam &\n  AnalyzeDocumentMediaTypesParam &\n  AnalyzeDocumentBodyParam &\n  RequestParameters;\nexport type GetModelParameters = RequestParameters;\n\nexport interface BuildModelBodyParam {\n  /** Build request parameters. */\n  body: BuildDocumentModelRequest;\n}\n\nexport type BuildModelParameters = BuildModelBodyParam & RequestParameters;\n\nexport interface ComposeModelBodyParam {\n  /** Compose request parameters. */\n  body: ComposeDocumentModelRequest;\n}\n\nexport type ComposeModelParameters = ComposeModelBodyParam & RequestParameters;\n\nexport interface AuthorizeModelCopyBodyParam {\n  /** Authorize copy request parameters. */\n  body: AuthorizeCopyRequest;\n}\n\nexport type AuthorizeModelCopyParameters = AuthorizeModelCopyBodyParam & RequestParameters;\n\nexport interface CopyModelToBodyParam {\n  /** Copy to request parameters. */\n  body: CopyAuthorization;\n}\n\nexport type CopyModelToParameters = CopyModelToBodyParam & RequestParameters;\nexport type ListModelsParameters = RequestParameters;\nexport type DeleteModelParameters = RequestParameters;\n\nexport interface BuildClassifierBodyParam {\n  /** Build request parameters. */\n  body: BuildDocumentClassifierRequest;\n}\n\nexport type BuildClassifierParameters = BuildClassifierBodyParam & RequestParameters;\nexport type ListClassifiersParameters = RequestParameters;\nexport type GetClassifierParameters = RequestParameters;\nexport type DeleteClassifierParameters = RequestParameters;\n\nexport interface ClassifyDocumentFromStreamBodyParam {\n  /**\n   * Input content.\n   *\n   * Value may contain any sequence of octets\n   */\n  body: string | Uint8Array | ReadableStream<Uint8Array> | NodeJS.ReadableStream;\n}\n\nexport interface ClassifyDocumentFromStreamQueryParamProperties {\n  /**\n   * Method used to compute string offset and length.\n   *\n   * Possible values: textElements, unicodeCodePoint, utf16CodeUnit\n   */\n  stringIndexType?: string;\n  /**\n   * Document splitting mode.\n   *\n   * Possible values: auto, none, perPage\n   */\n  split?: string;\n}\n\nexport interface ClassifyDocumentFromStreamQueryParam {\n  queryParameters?: ClassifyDocumentFromStreamQueryParamProperties;\n}\n\nexport interface ClassifyDocumentFromStreamMediaTypesParam {\n  /** Input content type. */\n  contentType:\n    | \"application/octet-stream\"\n    | \"application/pdf\"\n    | \"image/jpeg\"\n    | \"image/png\"\n    | \"image/tiff\"\n    | \"image/bmp\"\n    | \"image/heif\"\n    | \"text/html\"\n    | \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    | \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\";\n}\n\nexport type ClassifyDocumentFromStreamParameters = ClassifyDocumentFromStreamQueryParam &\n  ClassifyDocumentFromStreamMediaTypesParam &\n  ClassifyDocumentFromStreamBodyParam &\n  RequestParameters;\n\nexport interface ClassifyDocumentBodyParam {\n  /** Classify request parameters. */\n  body: ClassifyDocumentRequest;\n}\n\nexport interface ClassifyDocumentQueryParamProperties {\n  /**\n   * Method used to compute string offset and length.\n   *\n   * Possible values: textElements, unicodeCodePoint, utf16CodeUnit\n   */\n  stringIndexType?: string;\n  /**\n   * Document splitting mode.\n   *\n   * Possible values: auto, none, perPage\n   */\n  split?: string;\n}\n\nexport interface ClassifyDocumentQueryParam {\n  queryParameters?: ClassifyDocumentQueryParamProperties;\n}\n\nexport interface ClassifyDocumentMediaTypesParam {\n  /** Input content type */\n  contentType: \"application/json\";\n}\n\nexport type ClassifyDocumentParameters = ClassifyDocumentQueryParam &\n  ClassifyDocumentMediaTypesParam &\n  ClassifyDocumentBodyParam &\n  RequestParameters;\nexport type GetClassifyResultParameters = RequestParameters;\n"]}